name: CS2 Price Monitor (Fixed)

on:
  schedule:
    # 每5分钟运行一次
    - cron: '*/5 * * * *'
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  price-monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create required directories
      run: |
        mkdir -p data logs config
        
    - name: Create config file
      run: |
        cat > config/config.json << EOF
        {
          "api": {
            "csqaq": {
              "baseUrl": "https://api.csqaq.com/api/v1",
              "token": "JOVN71P7T388E2N1G1H6W5A0",
              "whitelist_ip": "111.19.113.82"
            }
          },
          "notification": {
            "wxpusher": {
              "appToken": "AT_MGRDCtFJyM0GSpNDL5Kx3veU7WVpc3nj",
              "baseUrl": "https://wxpusher.zjiecode.com"
            }
          },
          "monitor": {
            "interval": 300000,
            "platforms": ["youyoupin", "buff", "steam"],
            "priceThreshold": 1.0,
            "retryAttempts": 3,
            "retryDelay": 5000,
            "historyDays": 180
          },
          "storage": {
            "dataPath": "./data/price-history.json",
            "maxHistoryDays": 180
          },
          "logging": {
            "level": "info",
            "file": "logs/monitor.log"
          }
        }
        EOF
        
    - name: Create items.json
      run: |
        cat > config/items.json << 'EOF'
        {
          "items": [
            {
              "id": 1,
              "name": "AK-47 | 红线",
              "market_name": "AK-47 | Redline",
              "enabled": true,
              "platforms": ["youyoupin", "buff", "steam"],
              "wear_ranges": ["FT", "MW", "FN"],
              "notify_threshold": 0.9,
              "priority": "high"
            }
          ]
        }
        EOF
        
    - name: Test WXpusher API first
      run: |
        echo "🧪 测试WXpusher API连接..."
        response=$(curl -s -X POST "https://wxpusher.zjiecode.com/api/send/message" \
          -H "Content-Type: application/json" \
          -d '{
            "appToken": "AT_MGRDCtFJyM0GSpNDL5Kx3veU7WVpc3nj",
            "content": "🔄 CS2价格监控系统启动\n\n⏰ 时间: '"$(date)"'\n🔧 正在初始化监控服务...',
            "summary": "CS2监控启动",
            "contentType": 1,
            "uids": ["UID_Nkv98Q7XEQcDsvSInIlR10nm33xI"]
          }')
        
        if echo "$response" | grep -q '"code":1000'; then
          echo "✅ WXpusher API测试成功"
        else
          echo "❌ WXpusher API测试失败: $response"
          echo "继续执行价格监控..."
        fi
        
    - name: Test CSQAQ API
      run: |
        echo "🔍 测试CSQAQ API连接..."
        response=$(curl -s -X GET "https://api.csqaq.com/api/v1/items?limit=1" \
          -H "Authorization: Bearer JOVN71P7T388E2N1G1H6W5A0")
        
        if echo "$response" | grep -q '"success":true\|data'; then
          echo "✅ CSQAQ API连接正常"
        else
          echo "❌ CSQAQ API连接失败: $response"
          echo "继续执行..."
        fi
        
    - name: Run simple monitor test
      run: |
        echo "🚀 启动简化版价格监控..."
        echo "开始时间: $(date)"
        
        # 创建简化的监控脚本
        cat > simple-monitor.js << 'EOF'
        const axios = require('axios');
        const fs = require('fs');
        const path = require('path');
        
        async function testMonitor() {
          try {
            console.log('🔍 开始价格检查...');
            
            // 测试CSQAQ API
            const apiResponse = await axios.get('https://api.csqaq.com/api/v1/items?limit=1', {
              headers: {
                'Authorization': 'Bearer JOVN71P7T388E2N1G1H6W5A0'
              }
            });
            
            console.log('✅ API连接成功');
            
            // 发送测试通知
            const wxResponse = await axios.post('https://wxpusher.zjiecode.com/api/send/message', {
              appToken: 'AT_MGRDCtFJyM0GSpNDL5Kx3veU7WVpc3nj',
              content: `🎯 CS2价格监控系统运行正常！\n\n⏰ 检查时间: ${new Date().toLocaleString()}\n✅ API状态: 正常\n📊 监控状态: 运行中\n\n🔧 AppToken: AT_MGRDCtFJyM0GSpNDL5Kx3veU7WVpc3nj`,
              summary: 'CS2监控正常运行',
              contentType: 1,
              uids: ['UID_Nkv98Q7XEQcDsvSInIlR10nm33xI']
            });
            
            console.log('📱 通知发送结果:', wxResponse.data);
            
            if (wxResponse.data.code === 1000) {
              console.log('✅ 监控测试完成 - 一切正常！');
              return true;
            } else {
              console.log('❌ 通知发送失败:', wxResponse.data);
              return false;
            }
            
          } catch (error) {
            console.error('❌ 监控测试失败:', error.message);
            return false;
          }
        }
        
        // 运行测试
        testMonitor().then(success => {
          if (success) {
            console.log('🎉 所有测试通过！');
            process.exit(0);
          } else {
            console.log('💥 测试失败！');
            process.exit(1);
          }
        });
        EOF
        
        # 运行简化监控脚本
        node simple-monitor.js
        
    - name: Show results
      if: always()
      run: |
        echo "## 📊 监控执行结果" >> $GITHUB_STEP_SUMMARY
        echo "- **执行时间**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **AppToken**: AT_MGRDCtFJyM0GSpNDL5Kx3veU7WVpc3nj" >> $GITHUB_STEP_SUMMARY
        echo "- **监控状态**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- **步骤状态**: ${{ steps.*.outcome }}" >> $GITHUB_STEP_SUMMARY